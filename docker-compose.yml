version: '3.8'

services:
  # Frontend - Next.js 14
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - neoncasino

  # Backend - Django 5
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://neoncasino:neoncasino@postgres:5432/neoncasino
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=neoncasino
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_ADMIN_CHAT_ID=${TELEGRAM_ADMIN_CHAT_ID:-}
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - neoncasino
    command: python manage.py runserver 0.0.0.0:8000

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_ADMIN_CHAT_ID=${TELEGRAM_ADMIN_CHAT_ID:-}
      - API_BASE_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - neoncasino
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=neoncasino
      - POSTGRES_USER=neoncasino
      - POSTGRES_PASSWORD=neoncasino
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - neoncasino
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neoncasino"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - neoncasino
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3 Compatible Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - neoncasino
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://neoncasino:neoncasino@postgres:5432/neoncasino
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=neoncasino
      - AWS_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - neoncasino
    command: celery -A neoncasino worker -l info
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://neoncasino:neoncasino@postgres:5432/neoncasino
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=neoncasino
      - AWS_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - neoncasino
    command: celery -A neoncasino beat -l info
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - neoncasino
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  media_files:

networks:
  neoncasino:
    driver: bridge


















